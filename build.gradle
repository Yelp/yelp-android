apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'

repositories {
    mavenCentral()
}

/**
 * Configure integration tests. Set up a new integrationTest task to execute tests in src/integration-test separately
 * from the main build.
 *
 * To run all of the integration tests, run "gradle integrationTest".
 */
sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }
        resources.srcDir file('src/integration-test/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    // Set upToDateWhen to false so integration tests always run when the task is called.
    outputs.upToDateWhen { false }
}

// Makes integration tests not run by default.
check.dependsOn -= integrationTest

/**
 * Configure deployment.
 *
 * To deploy artifacts to public repository, run "gradle upload". You need to have "ossrhUsername", "ossrhPassword",
 * "signing.keyId", "signing.password" and "signing.secretKeyRingFile" in your HOME/.gradle/gradle.properties file
 * to upload archives.
 *
 * To deploy artifacts to local Maven repository, run "gradle install".
 */
group = 'com.yelp.clientlib'
archivesBaseName = 'yelp-android'

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

task checkOSSRHProperties << {
    if (project.properties['ossrhUsername'] == null || project.properties['ossrhPassword'] == null) {
        throw new IllegalStateException('ERROR: you need to have ossrhUsername and ossrhPassword properties' +
                ' defined in your HOME/.gradle/gradle.properties file to upload archives');
    }
    if (project.properties['signing.keyId'] == null || project.properties['signing.password'] == null || project
            .properties['signing.secretKeyRingFile'] == null) {
        throw new IllegalStateException('ERROR: you need to have signing.keyId, signing.password and ' +
                'signing.secretKeyRingFile properties defined in your HOME/.gradle/gradle.properties file to sign ' +
                'the archives.');
    }
}

uploadArchives {
    dependsOn checkOSSRHProperties
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: project.properties['ossrhUsername'], password: project.properties['ossrhPassword'])
            }

            snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots') {
                authentication(userName: project.properties['ossrhUsername'], password: project.properties['ossrhPassword'])
            }

            pom.project {
                name 'Yelp Android Clientlib'
                packaging 'jar'
                description 'A Java library for the Yelp API. It simplifies the process of authentication, request ' +
                        'construction, and response parsing for Java/Android developers using the Yelp API.'
                url 'https://www.yelp.com/developers'

                scm {
                    connection 'scm:git:git@github.com:Yelp/yelp-android.git'
                    developerConnection 'scm:git:git@github.com:Yelp/yelp-android.git'
                    url 'git@github.com:Yelp/yelp-android.git'
                }

                licenses {
                    license {
                        name 'The MIT License (MIT)'
                        url 'https://opensource.org/licenses/MIT'
                    }
                }

                developers {
                    developer {
                        name 'Yelp'
                        email 'api+android@yelp.com'
                    }

                    developer {
                        id 'tzuhanwu'
                        name 'Tzu-Han Wu'
                        email 'tzuhanwu@yelp.com'
                    }
                }
            }
        }
    }
}

signing {
    required { gradle.taskGraph.hasTask('uploadArchives') }
    sign configurations.archives
}

/**
 * Configure package dependencies.
 */
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.google.auto.value:auto-value:1.1'
    compile 'com.squareup.retrofit2:retrofit:2.0.0'
    compile 'com.squareup.retrofit2:converter-jackson:2.0.0'
    compile 'oauth.signpost:signpost-core:1.2.1.2'
    compile 'se.akerfeldt:okhttp-signpost:1.0.0'
    compile 'com.squareup.okhttp3:okhttp:3.1.2'

    testCompile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.6.3'
    testCompile 'com.squareup.okhttp:mockwebserver:2.7.0'
    testCompile 'org.easymock:easymock:3.4'
    testCompile 'org.powermock:powermock-api-easymock:1.6.4'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'junit:junit:4.12'
    testCompile 'junit-addons:junit-addons:1.4'
}